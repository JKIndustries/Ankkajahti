/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ankkajahti;

import java.awt.event.ActionListener;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.geom.AffineTransform;
import java.awt.geom.Rectangle2D;
import java.util.LinkedList;
import java.util.PriorityQueue;
import javax.swing.Timer;

/**
 *
 * @author jphanski
 */
public class Ikkuna extends javax.swing.JPanel implements ActionListener, MouseListener {

    PriorityQueue<DrawableObject> objektit;
    LinkedList<Ankka> tuhotut;
    public int fps;
    private Timer timer;
    public static double hitboxKoko = 0.08;

    /**
     * Creates new form Ikkuna
     */
    public Ikkuna() {
        initComponents();
        fps = 0;
        addMouseListener(this);
        tuhotut = new LinkedList<Ankka>();
        //timer = new Timer(1000 / Ankkajahti.ticks, this);
        timer = new Timer(10, this);
        timer.start();
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);
        Graphics2D g2d = (Graphics2D) g;
        g2d.setColor(Color.cyan);
        g2d.fillRect(0, 0, this.getWidth(), this.getHeight());

        FontMetrics fm;
        
        g2d.setColor(Color.BLACK);
        g2d.setFont(new Font("SansSerif", Font.BOLD, 22));
        fm = g2d.getFontMetrics();
        int x = (this.getWidth() - (int) fm.stringWidth(Ankkajahti.getTitleText())) / 2;
        int y = fm.getAscent() + 5;
        
        g2d.drawString(Ankkajahti.getTitleText(), x, y);
        g2d.setColor(Color.DARK_GRAY);
        g2d.setFont(new Font("Monospaced", Font.PLAIN, 15));
        fm = g2d.getFontMetrics();
        
        x = (this.getWidth() - (int) fm.stringWidth(Ankkajahti.getInfoText())) / 2;
        y = this.getHeight() / 2 + fm.getAscent();
        
        g2d.drawString(Ankkajahti.getInfoText(), x, y);
        
        for (DrawableObject o : objektit) {
            o.drawObject(g2d);
        }
        g2d.setColor(Color.BLUE);
        g2d.fillRect(0, (int) (this.getHeight() * 0.75), this.getWidth(), this.getHeight());
    }

    /*@Override
    protected void paintComponent(Graphics g) {
        Graphics2D g2d = (Graphics2D) g;
        g2d.setColor(Color.BLACK);
        g2d.fillRect(0, 0, this.getWidth(), this.getHeight());
        for (Ankka a : ankat) {
            piirraAnkka(g2d, a.getX(), a.getY());
        }
    }*/
    protected void piirraAnkka(Graphics2D g2d, double x, double y) {
        g2d.setColor(Color.YELLOW);
        g2d.fillRoundRect((int) (x * this.getWidth()), (int) (y * this.getHeight()), (int) (this.getWidth() * hitboxKoko), (int) (this.getHeight() * hitboxKoko), 6, 6);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void actionPerformed(ActionEvent e) {
        this.repaint();
        Toolkit.getDefaultToolkit().sync();
        fps++;
        timer.restart();
    }

    @Override
    public void mouseClicked(MouseEvent e) {
        /*for (Ankka a : ankat) {
            if (a.getX()*this.getWidth()< e.getX() && a.getX() * this.getWidth() + 20 > e.getX() && a.getY() * this.getHeight()< e.getY() && a.getY() * this.getHeight() + 20 > e.getY()) {
                //Tuhotaan ankka johon osui
                Ankkajahti.tuhoaAnkka(a);
                System.out.println("Osui!");
                return;
            }
            System.out.print(a.getX()*this.getWidth() + ", " + a.getY() * this.getWidth() + ".\n");
        }
        System.out.println("At least you tried :( \n Coordinates: " + e.paramString());*/
    }

    @Override
    public void mousePressed(MouseEvent e) {
        for (Ankka a : ankat) {
            if (a.getX() * this.getWidth() < e.getX() && a.getX() * this.getWidth() + (int) (this.getWidth() * hitboxKoko) > e.getX() && a.getY() * this.getHeight() < e.getY() && a.getY() * this.getHeight() + (int) (this.getHeight() * hitboxKoko) > e.getY()) {
                //Tuhotaan ankka johon osui
                tuhotut.add(a);
                Ankkajahti.tuhoaAnkka(a);
                return;
            }
            System.out.print(a.getX() * this.getWidth() + ", " + a.getY() * this.getWidth() + ".\n");
        }
    }

    @Override
    public void mouseReleased(MouseEvent e) {

    }

    @Override
    public void mouseEntered(MouseEvent e) {

    }

    @Override
    public void mouseExited(MouseEvent e) {

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
